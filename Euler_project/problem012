#python
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""
from time import ctime, time
from itertools import combinations

def sum_till_n(n):
    return int(n*(n+1)/2)

result = [2,3,5,7]

def is_prime(n):
    root = int(n**0.5)
    primes = primes_till_n(root)    
    is_prime = True
    for a in primes:
        if n % a == 0:
            is_prime = False
            break
    return is_prime
        
def primes_till_n(n):
    if n <= result[-1]:
        return [x for x in result if x <= n]
    else:
        max_prime = result[-1]
        max_prime +=2        
        while max_prime <= n:            
            if is_prime(max_prime):
                result.append(max_prime)
                max_prime = result[-1]            
            max_prime += 2
        return result
    
def factors(n):
    """return all primes that included in the number"""
    if not is_prime(n):
        divides = primes_till_n(int(n**0.5))
        #print('divides are ', divides)
        divisors =[]
        temp = n
        for a in divides:           
            while temp % a == 0:
                divisors.append(a)
                temp = temp / a  
                #print(temp)
        if temp > 1:
            divisors.append(int(temp))
        divisors.sort()
        divisors.insert(0,1)
        return divisors
    return [1,n]
        
def divisors_details(n):
    """this version return all divisors even if the numbers repeated but with list"""
    all_factors = factors(n)[1:]
    divisors = []
    divisors_list = []
    for i in range(1,len(all_factors)+1):
        for x in combinations(all_factors,i):
            temp = list(x)
            temp.sort()            
            if temp not in divisors_list:
                divisors_list.append(temp)
                divisors.append(list_product(temp))
    return divisors_list,divisors

def list_product(a_list):
    result = 1
    for x in a_list:
        result *= x
    return result
    

print(ctime())
start = time()

for i in range(1,50000):
    my_number = sum_till_n(i)
    my_list = divisors_details(my_number)[1]
    if len(my_list) > 500 :
        print('{0:3} is sum {1:6} and Generate {2} like this: {3}'.format(i,my_number,len(my_list), my_list))




print('{:.3f} sec'.format(time()-start))

    
