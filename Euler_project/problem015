#python3.6
"""


Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.

How many such routes are there through a 20×20 grid?
"""


from time import time

def find_path(base = 3):
    """research purpose not related to the exercise"""
    myList = list(range((base+1)**2))        
    number = base*2 +1
    result = []
    point = list(range(base))+list(range(base,(base+1)**2,base+1))
    end = list(range(0,(base+1)**2,base+1)) + list(range((base+1)**2-base,(base+1)**2))
    length = len(point)
    result.append(point.copy())
    #counter = 1
    while point != end:
        """find the courner that should be replaced"""
        for index in range(length-2,0,-1):    
            #counter += 1
            if point[index+1] - point[index] == base+1 and point[index] - point[index-1] == 1:
                point[index] = point[index] + base
                # we should made somthing here to add the case:
                #5   [0, 1, 5, 6, 7, 11, 15]
                for i in range(index+1,length):
                    if (point[i-1]+1) %(base+1) != 0:
                        point[i] = point[i-1]+1
                    else:
                        point[i] = point[i-1] + base +1
                result.append(point.copy())
                break
            else:
                continue
    #print(counter)
    return result    
    
def count_element_in_col(myList,col):
    """counting elements occurunce inside a list of list"""
    my_dict = {}
    for sub in myList:
        if sub[col] not in my_dict.keys():
            my_dict[sub[col]] = 1
        else:
            my_dict[sub[col]] += 1
    return my_dict
        
"""
for each base number the generated result in the middle of each list counted as follow

base 2 generate 6 result - {2: 1, 4: 4, 6: 1}
base 3 generate 20 result - {3: 1, 6: 9, 9: 9, 12: 1}
base 4 generate 70 result - {4: 1, 8: 16, 12: 36, 16: 16, 20: 1}
base 5 generate 252 result - {5: 1, 10: 25, 15: 100, 20: 100, 25: 25, 30: 1}
base 6 generate 924 result - {6: 1, 12: 36, 18: 225, 24: 400, 30: 225, 36: 36, 42: 1}
base 7 generate 3432 result - {7: 1, 14: 49, 21: 441, 28: 1225, 35: 1225, 42: 441, 49: 49, 56: 1}
base 8 generate 12870 result - {8: 1, 16: 64, 24: 784, 32: 3136, 40: 4900, 48: 3136, 56: 784, 64: 64, 72: 1}
base 9 generate 48620 result - {9: 1, 18: 81, 27: 1296, 36: 7056, 45: 15876, 54: 15876, 63: 7056, 72: 1296, 81: 81, 90: 1}
base 10 generate 184756 result - {10: 1, 20: 100, 30: 2025, 40: 14400, 50: 44100, 60: 63504, 70: 44100, 80: 14400, 90: 2025, 100: 100, 110: 1}
"""
def find_path_counter(base = 4):
    keys = list(range(base ,base*(base+1)+1,base))
    print(keys)

""" 
it could be generated by this:
for i in range(2,11):
    a = find_path(i)
    print('base {0} generate {1} result - {2}'.format(i,len(a),count_element_in_col(a,i)))
"""

##solving the problem is here:
"""
base 4 generate 70 result - {4: 1, 8: 16, 12: 36, 16: 16, 20: 1}
no 4 appears 1 = comb(4,0)
no 8 appears 16 time = comn(4,1)**2
no 12 appears 36 times = comb(4,2)**2
no 16 appears 16 times = comb(4,3)**2
and so on...
"""

def factorial(number = 5):
    """find the factorial of a number"""
    if number <= 1: return 1
    else:
        result = 1
        for i in range(2,number+1): result *= i
        return result
    
def comb(a,b):
    """find the combination value"""
    if a >= b: return int(factorial(a)/(factorial(b)*factorial(a-b)))
    else: return 1
    
def problem15_solver(base = 3):
    result = 0
    for i in range(0,base+1):
        result += comb(base,i)**2
    return result

start = time()
print(problem15_solver(20))
